#ifndef FONT_H
#define FONT_H

namespace lmx
{

const uint8_t ASCII_OFFSET = 32;
const uint8_t FONT_ARRAY_SIZE = 91;
const uint8_t ASCII_START = ASCII_OFFSET;
const uint8_t ASCII_END = (ASCII_OFFSET + FONT_ARRAY_SIZE - 1);
const uint8_t FONT_COL_STOP_CHAR = 0xff;
const uint8_t FONT_CHAR_MAX_WIDTH = 5;

const uint8_t FontArray[FONT_ARRAY_SIZE][FONT_CHAR_MAX_WIDTH] =

	{
	{0x00, 0x00, 0xff, 0xff, 0xff},		//' '
	{0x5f, 0xff, 0xff, 0xff, 0xff},  	//'!'
	{0x07, 0x00, 0x07, 0xff, 0xff}, 	//'"'
	{0x14, 0x7f, 0x14, 0x7f, 0x14}, 	//'#'
	{0x26, 0x6b, 0x12, 0xff, 0xff},		//'$'
	{0x32, 0x18, 0x0c, 0x26, 0xff},		//'%'
	{0x36, 0x49, 0x51, 0x26, 0x50}, 	//'&'
	{0x06, 0xff, 0xff, 0xff, 0xff},		//'''
	{0x3e, 0x41, 0xff, 0xff, 0xff}, 	//'('
	{0x41, 0x3e, 0xff, 0xff, 0xff}, 	//')'
	{0x22, 0x14, 0x7f, 0x14, 0x22},		//'*'
	{0x08, 0x3e, 0x08, 0xff, 0xff}, 	//'+'
	{0x40, 0x30, 0xff, 0xff, 0xff},		//','
	{0x08, 0x08, 0x08, 0xff, 0xff}, 	//'-'
	{0x40, 0xff, 0xff, 0xff, 0xff}, 	//'.'
	{0x60, 0x1c, 0x03, 0xff, 0xff}, 	//'/'
	{0x3e, 0x51, 0x49, 0x3e, 0xff},		//'0'
	{0x42, 0x7f, 0x40, 0xff, 0xff},		//'1'
	{0x62, 0x51, 0x49, 0x46, 0xff},		//'2'
	{0x22, 0x49, 0x49, 0x36, 0xff},		//'3'
	{0x18, 0x14, 0x12, 0x7f, 0xff},		//'4'
	{0x2f, 0x49, 0x49, 0x31, 0xff},		//'5'
	{0x3e, 0x49, 0x49, 0x32, 0xff},		//'6'
	{0x01, 0x71, 0x09, 0x07, 0xff},		//'7'
	{0x36, 0x49, 0x49, 0x36, 0xff},		//'8'
	{0x26, 0x49, 0x49, 0x3e, 0xff},		//'9'
	{0x14, 0xff, 0xff, 0xff, 0xff},		//':'
	{0x20, 0x14, 0xff, 0xff, 0xff},		//';'
	{0x08, 0x14, 0x22, 0x41, 0xff},		//'<'
	{0x14, 0x14, 0x14, 0x14, 0xff},		//'='
	{0x41, 0x22, 0x14, 0x08, 0xff},		//'>'
	{0x06, 0x01, 0x51, 0x09, 0x06},		//'?'
	{0x3e, 0x41, 0x4d, 0x4f, 0xff},		//'@'
	{0x7e, 0x11, 0x11, 0x7e, 0xff},		//'A'
	{0x7f, 0x49, 0x49, 0x36, 0xff},		//'B'
	{0x3e, 0x41, 0x41, 0x22, 0xff},		//'C'
	{0x7f, 0x41, 0x22, 0x1c, 0xff},		//'D'
	{0x7f, 0x49, 0x49, 0x49, 0xff},		//'E'
	{0x7f, 0x09, 0x09, 0x01, 0xff},		//'F'
	{0x3e, 0x41, 0x51, 0x32, 0xff},		//'G'
	{0x7F, 0x08, 0x08, 0x7f, 0xff},		//'H'
	{0x41, 0x7f, 0x41, 0xff, 0xff},		//'I'
	{0x30, 0x40, 0x40, 0x3f, 0xff},		//'J'
	{0x7f, 0x08, 0x14, 0x63, 0xff},		//'K'
	{0x7f, 0x40, 0x40, 0x40, 0xff},		//'L'
	{0x7f, 0x02, 0x0c, 0x02, 0x7f},		//'M'
	{0x7f, 0x02, 0x04, 0x08, 0x7f},		//'N'
	{0x3e, 0x41, 0x41, 0x3e, 0xff},		//'O'
	{0x7f, 0x09, 0x09, 0x06, 0xff},		//'P'
	{0x3e, 0x41, 0x51, 0x3e, 0x40},		//'Q'
	{0x7f, 0x11, 0x29, 0x46, 0xff},		//'R'
	{0x26, 0x49, 0x49, 0x32, 0xff},		//'S'
	{0x01, 0x01, 0x7f, 0x01, 0x01},		//'T'
	{0x3f, 0x40, 0x40, 0x3f, 0xff},		//'U'
	{0x1f, 0x20, 0x40, 0x20, 0x1f},		//'V'
	{0x1f, 0x60, 0x38, 0x60, 0x1f},		//'W'
	{0x41, 0x36, 0x08, 0x36, 0x41},		//'X'
	{0x07, 0x08, 0x70, 0x08, 0x07},		//'Y'
	{0x61, 0x51, 0x49, 0x45, 0x43},		//'Z'
	{0x7f, 0x41, 0x41, 0xff, 0xff},		//']'
	{0x02, 0x04, 0x08, 0x10, 0x20},		//'\'
	{0x41, 0x41, 0x7f, 0xff, 0xff},		//'['
	{0x04, 0x02, 0x01, 0x02, 0x04},		//'^'
	{0x40, 0x40, 0x40, 0x40, 0x40},		//'_'
	{0x01, 0x02, 0xff, 0xff, 0xff},		//'`'
	{0x30, 0x48, 0x48, 0x38, 0x40},		//'a'
	{0x7e, 0x48, 0x48, 0x30, 0xff},		//'b'
	{0x38, 0x44, 0x44, 0x28, 0xff},		//'c'
	{0x30, 0x48, 0x48, 0x7e, 0xff},		//'d'
	{0x38, 0x54, 0x54, 0x18, 0xff},		//'e'
	{0x10, 0x7c, 0x12, 0x04, 0xff},		//'f'
	{0x4c, 0x52, 0x52, 0x3c, 0xff},		//'g'
	{0x7e, 0x08, 0x08, 0x70, 0xff},		//'h'
	{0x7a, 0xff, 0xff, 0xff, 0xff},		//'i'
	{0x20, 0x40, 0x3a, 0xff, 0xff},		//'j'
	{0x7e, 0x18, 0x24, 0x42, 0xff},		//'k'
	{0x7e, 0xff, 0xff, 0xff, 0xff},		//'l'
	{0x78, 0x04, 0x18, 0x04, 0x78},		//'m'
	{0x70, 0x08, 0x08, 0x70, 0xff},		//'n'
	{0x30, 0x48, 0x48, 0x30, 0xff},		//'o'
	{0x7c, 0x12, 0x12, 0x0c, 0xff},		//'p'
	{0x0c, 0x12, 0x12, 0x7c, 0x40},		//'q'
	{0x78, 0x04, 0x04, 0x08, 0xff},		//'r'
	{0x48, 0x54, 0x54, 0x24, 0xff},		//'s'
	{0x08, 0x7e, 0x08, 0xff, 0xff},		//'t'
	{0x38, 0x40, 0x40, 0x38, 0xff},		//'u'
	{0x38, 0x40, 0x20, 0x18, 0xff},		//'v'
	{0x1c, 0x60, 0x30, 0x60, 0x1c},		//'w'
	{0x48, 0x30, 0x30, 0x48, 0xff},		//'x'
	{0x06, 0x48, 0x48, 0x3e, 0xff},		//'y'
	{0x44, 0x64, 0x54, 0x4c, 0xff}};	//'z'


}	//end namespace lmx

#endif
